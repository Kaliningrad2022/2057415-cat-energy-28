{"version":3,"sources":["gulpfile.js"],"names":["_gulp","_interopRequireDefault","require","_gulpPlumber","_gulpDartSass","_gulpPostcss","_autoprefixer","_postcssCsso","_gulpRename","_gulpTerser","_gulpLibsquoosh","_gulpSvgmin","_gulpSvgstore","_del","_browserSync","styles","gulp","src","sourcemaps","pipe","on","sass","logError","dest","browser","stream","html","optimizeImages","scripts","createWebp","copyImages","webp","sprite","inlineSvg","base","done","clean","server","init","cors","notify","ui","reload","watcher","watch","series","build","copy","parallel","svg"],"mappings":"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","file":"gulpfile.min.js","sourcesContent":["import gulp from 'gulp';\nimport plumber from 'gulp-plumber';\nimport sass from 'gulp-dart-sass';\nimport postcss from 'gulp-postcss';\nimport autoprefixer from 'autoprefixer';\nimport csso from 'postcss-csso';\nimport rename from 'gulp-rename';\nimport terser from 'gulp-terser';\nimport squoosh from 'gulp-libsquoosh';\nimport svgo from 'gulp-svgmin';\nimport svgstore from 'gulp-svgstore';\nimport del from 'del';\nimport browser from 'browser-sync';\n\n// Styles\n\nexport const styles = () => {\nreturn gulp.src('source/sass/style.scss', { sourcemaps: true })\n.pipe(plumber())\n.pipe(sass().on('error', sass.logError))\n.pipe(postcss([\nautoprefixer(),\ncsso()\n]))\n.pipe(rename('style.min.css'))\n.pipe(gulp.dest('build/css', { sourcemaps: '.' }))\n.pipe(browser.stream());\n}\n\n// HTML\n\nconst html = () => {\nreturn gulp.src('source/*.html')\n.pipe(gulp.dest('build'));\n}\n\n// Scripts\n\nconst scripts = () => {\nreturn gulp.src('source/js/script.js')\n.pipe(gulp.dest('build/js'))\n.pipe(browser.stream());\n}\n\n// Images\n\nconst optimizeImages = () => {\nreturn gulp.src('source/img/**/*.{png,jpg}')\n.pipe(squoosh())\n.pipe(gulp.dest('build/img'))\n}\n\nconst copyImages = () => {\nreturn gulp.src('source/img/**/*.{png,jpg}')\n.pipe(gulp.dest('build/img'))\n}\n\n// WebP\n\nconst createWebp = () => {\nreturn gulp.src('source/img/**/*.{png,jpg}')\n.pipe(squoosh({\nwebp: {}\n}))\n.pipe(gulp.dest('build/img'))\n}\n\n// SVG\n\nconst svg = () =>\ngulp.src(['source/img/*.svg', '!source/img/icons/*.svg'])\n.pipe(svgo())\n.pipe(gulp.dest('build/img'));\n\nconst sprite = () => {\nreturn gulp.src('source/img/icons/*.svg')\n.pipe(svgo())\n.pipe(svgstore({\ninlineSvg: true\n}))\n.pipe(rename('sprite.svg'))\n.pipe(gulp.dest('build/img'));\n}\n\n// Copy\n\nconst copy = (done) => {\ngulp.src([\n'source/fonts/*.{woff2,woff}',\n'source/*.ico',\n], {\nbase: 'source'\n})\n.pipe(gulp.dest('build'))\ndone();\n}\n\n// Clean\n\nconst clean = () => {\nreturn del('build');\n};\n\n// Server\n\nconst server = (done) => {\nbrowser.init({\nserver: {\nbaseDir: 'build'\n},\ncors: true,\nnotify: false,\nui: false,\n});\ndone();\n}\n\n// Reload\n\nconst reload = (done) => {\nbrowser.reload();\ndone();\n}\n\n// Watcher\n\nconst watcher = () => {\ngulp.watch('source/sass/**/*.scss', gulp.series(styles));\ngulp.watch('source/js/script.js', gulp.series(scripts));\ngulp.watch('source/*.html', gulp.series(html, reload));\n}\n\n// Build\n\nexport const build = gulp.series(\nclean,\ncopy,\noptimizeImages,\ngulp.parallel(\nstyles,\nhtml,\nscripts,\nsvg,\nsprite,\ncreateWebp\n),\n);\n\n// Default\n\nexport default gulp.series(\nclean,\ncopy,\ncopyImages,\ngulp.parallel(\nstyles,\nhtml,\nscripts,\nsvg,\nsprite,\ncreateWebp\n),\ngulp.series(\nserver,\nwatcher\n));\n"]}